<?xml version="1.0"?>
<knowledge>
    <title>Safeplace Default</title>
    <description>
        This knowledgebase describes all the relevant types of buildings and
        associated risks.
    </description>

    <!--
    The goal of our program is to create a checklist of possible risks,
    associated with the building that the user is concerned with.

    Note the building name parameter: this is the name of the fact that the
    solver will try to deduce. Each building has a value which that fact should
    have if the building is to be deduced.

    The value $undefined is assigned to a fact if the solver cannot find any way
    to deduce a value for the fact, i.e. there are no rules (left) that are
    applicable nor any questions.

    You can use the fact name with $ in front of it in pretty much any context
    to get the value of that fact.

    Note that $undefined is also a variable, as it should be the value of the
    fact 'undefined' in the knowledge base: that is what we try to match.

    If none of the building-clauses match, the system won't know what to print
    and not show the goal at all.
    -->
    <building name="chemical-plant" value="Yes">
        <risk name="hand-burn"></risk>
        <risk name="watery-eyes"></risk>
    </building>

    <building name="elementary-school" value="Yes">
        <risk name="fall-through-window"></risk>
    </building>

    <!--
    These checklist_items have a name that corresponds to the name of a risk in
    a building.  Their description is a question that will be asked in the
    checklist and the advice is given afterwards if the risk is deemed relevant.

    Different buildings can have the same risk.
    -->
    <checklist_item name="hand-burn">
        <description>
            Could a person burn his/her hand with a Bunsen brenner?
        </description>
        <advice>
            Enforce regulations such that people working with laboratory tools
            have to wear fire-proof gloves.
        </advice>
    </checklist_item>

    <checklist_item name="watery-eyes">
        <description>
            Could a person get watery eyes because of a chemical gas?
        </description>
        <advice>
            Keep all dangerous chemicals in a seperate locked room.
        </advice>
    </checklist_item>

    <checklist_item name="fall-through-window">
        <description>
            Could a child fall through a window?
        </description>
        <advice>
            Erect barriers such that children cannot reach the windows.
        </advice>
    </checklist_item>

    <!--
    These rule cases are pretty self explaining. The description is more for the
    programmer than for the user of the QA system: it is only displayed in the
    analyse view. However, it is really useful to determine which rule is
    misbehaving and what it should do instead.

    You can have multiple <fact>-clauses in your <then>-clause, but it can only
    be <fact>-clauses. You can not add rules or questions dynamically in this
    way.

    If you have multiple tests in your <if>-clause, you should immediately start
    with an <and> or <or>-clause. And of course you can combine them. The
    <fact>-clauses test whether a fact with that name has the value.

    In the <fact> clauses you can use variables for both the name argument and
    the value. It will then use the value of that fact you are referring to as
    if it has been there instead. If that fact you use as a variable is not yet
    derived, the solver will do that for you.

    Having intermediate rules is pretty much always a good idea.

    It is perfectly valid to have two separate rules with the same
    <then>-clause, the same consequences. Which one is first tried depends on
    which facts from the <if>-clause are higher on the goal stack.
    -->
    <rule>
        <description></description>
        <if>
            <fact name="children">to5</fact>
        </if>
        <then>
            <fact name="elementary-school">Yes</fact>
        </then>
    </rule>

    <!--
    And finally, to get user input, you can ask questions. Each question has its
    own set of consequences in the <then>-clause, and these could be multiple.
    You can even mix multiple facts in the same question.  However, it does make
    it rather difficult to reason about what the solver does.

    Again, you can use variables in both the fact names and values and in the
    texts of the descriptions. However, variables in the latter one are not
    guaranteed to be derived before the question is printed, so use those
    sparsely and know what you are doing.
    -->
    <question>
        <description>
            Are there children that regularly visit the building? In which age
            group are they?
        </description>
        <option>
            <description>0-5</description>
            <then>
                <fact name="children">to5</fact>
            </then>
        </option>
        <option>
            <description>5-10</description>
            <then>
                <fact name="children">to10</fact>
            </then>
        </option>
        <option>
            <description>10-15</description>
            <then>
                <fact name="children">to15</fact>
            </then>
        </option>
        <option>
            <description>No children</description>
            <then>
                <fact name="children">No</fact>
            </then>
        </option>
    </question>

    <question>
        <description>Are there a lot of chemicals in the building?</description>
        <option>
            <description>Yes</description>
            <then>
                <fact name="chemical-plant">Yes</fact>
            </then>
        </option>
        <option>
            <description>No</description>
            <then>
                <fact name="chemical-plant">No</fact>
            </then>
        </option>
    </question>

</knowledge>
